
// const API_KEY = 'AIzaSyAGpWWKzH7OOhKKYfw1Pe_9vbDvALf208Q';
import React, { useState } from 'react';
import {
  View,
  Text,
  ScrollView,
  TouchableOpacity,
  TextInput,
  StyleSheet,
  SafeAreaView,
  Alert,
  ActivityIndicator,
  Modal,
  Dimensions
} from 'react-native';
import Icon from 'react-native-vector-icons/MaterialIcons';
import { LinearGradient } from 'expo-linear-gradient';
import axios from 'axios';

const { width } = Dimensions.get('window');

// Replace with your actual Gemini API key
const API_KEY = ''; 
const API_URL = '';

const CRAFT_CATEGORIES = {
  'en': [
    'Pottery and Clay Work',
    'Stone Carving',
    'Bidriware',
    'Traditional Textiles',
    'Bone and Horn Craft',
    'Wood Carving'
  ],
  'hi': [
    '‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§ï‡•á ‡§¨‡§∞‡•ç‡§§‡§® ‡§î‡§∞ ‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä‡§ï‡§≤‡§æ',
    '‡§™‡§§‡•ç‡§•‡§∞ ‡§ï‡•Ä ‡§®‡§ï‡•ç‡§ï‡§æ‡§∂‡•Ä',
    '‡§¨‡§ø‡§¶‡§∞‡•Ä ‡§ï‡§≤‡§æ',
    '‡§™‡§æ‡§∞‡§Ç‡§™‡§∞‡§ø‡§ï ‡§µ‡§∏‡•ç‡§§‡•ç‡§∞',
    '‡§π‡§°‡•ç‡§°‡•Ä ‡§î‡§∞ ‡§∏‡•Ä‡§Ç‡§ó ‡§ï‡•Ä ‡§∂‡§ø‡§≤‡•ç‡§™‡§ï‡§≤‡§æ',
    '‡§≤‡§ï‡§°‡§º‡•Ä ‡§ï‡•Ä ‡§®‡§ï‡•ç‡§ï‡§æ‡§∂‡•Ä'
  ]
};

const LANGUAGE_OPTIONS = [
  { code: 'en', name: 'English', icon: 'üá∫üá∏' },
  { code: 'hi', name: '‡§π‡§ø‡§®‡•ç‡§¶‡•Ä', icon: 'üáÆüá≥' }
];

const DesignIdea = () => {
  const [prompt, setPrompt] = useState('');
  const [designSteps, setDesignSteps] = useState([]);
  const [suggestedPalette, setSuggestedPalette] = useState([]);
  const [isLoading, setIsLoading] = useState(false);
  const [selectedCategory, setSelectedCategory] = useState(null);
  const [selectedLanguage, setSelectedLanguage] = useState('en');
  const [isLanguageModalVisible, setIsLanguageModalVisible] = useState(true);

  const handleGenerateDesign = async () => {
    if (!prompt.trim()) {
      Alert.alert(
        selectedLanguage === 'en' 
          ? 'Please enter a design description' 
          : '‡§ï‡•É‡§™‡§Ø‡§æ ‡§°‡§ø‡§ú‡§º‡§æ‡§á‡§® ‡§µ‡§ø‡§µ‡§∞‡§£ ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç'
      );
      return;
    }

    setIsLoading(true);

    try {
      const contextMap = {
        'en': {
          context: 'As an Indian handicrafts expert, generate a design concept based on traditional techniques for:',
          instructions: `Provide a detailed response with:
1. Four specific steps using authentic techniques
2. Four traditional colors with their cultural significance

Response Format:
STEPS:
1. [Step 1 description]
2. [Step 2 description]
3. [Step 3 description]
4. [Step 4 description]

COLORS:
#[Color1 Hex Code] - [Color Name and Significance]
#[Color2 Hex Code] - [Color Name and Significance]
#[Color3 Hex Code] - [Color Name and Significance]
#[Color4 Hex Code] - [Color Name and Significance]`
        },
        'hi': {
          context: '‡§è‡§ï ‡§≠‡§æ‡§∞‡§§‡•Ä‡§Ø ‡§π‡§∏‡•ç‡§§‡§∂‡§ø‡§≤‡•ç‡§™ ‡§µ‡§ø‡§∂‡•á‡§∑‡§ú‡•ç‡§û ‡§ï‡•á ‡§∞‡•Ç‡§™ ‡§Æ‡•á‡§Ç, ‡§®‡§ø‡§Æ‡•ç‡§® ‡§ï‡•á ‡§≤‡§ø‡§è ‡§™‡§æ‡§∞‡§Ç‡§™‡§∞‡§ø‡§ï ‡§§‡§ï‡§®‡•Ä‡§ï‡•ã‡§Ç ‡§™‡§∞ ‡§Ü‡§ß‡§æ‡§∞‡§ø‡§§ ‡§°‡§ø‡§ú‡§º‡§æ‡§á‡§® ‡§Ö‡§µ‡§ß‡§æ‡§∞‡§£‡§æ ‡§§‡•à‡§Ø‡§æ‡§∞ ‡§ï‡§∞‡•á‡§Ç:',
          instructions: `‡§µ‡§ø‡§∏‡•ç‡§§‡•É‡§§ ‡§™‡•ç‡§∞‡§§‡§ø‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ ‡§¶‡•á‡§Ç:
1. ‡§Æ‡•Ç‡§≤ ‡§§‡§ï‡§®‡•Ä‡§ï‡•ã‡§Ç ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡§ï‡•á ‡§ö‡§æ‡§∞ ‡§µ‡§ø‡§∂‡§ø‡§∑‡•ç‡§ü ‡§ö‡§∞‡§£
2. ‡§â‡§®‡§ï‡•á ‡§∏‡§æ‡§Ç‡§∏‡•ç‡§ï‡•É‡§§‡§ø‡§ï ‡§Æ‡§π‡§§‡•ç‡§µ ‡§ï‡•á ‡§∏‡§æ‡§• ‡§ö‡§æ‡§∞ ‡§™‡§æ‡§∞‡§Ç‡§™‡§∞‡§ø‡§ï ‡§∞‡§Ç‡§ó

‡§™‡•ç‡§∞‡§æ‡§∞‡•Ç‡§™:
‡§ö‡§∞‡§£:
1. [‡§ö‡§∞‡§£ 1 ‡§µ‡§ø‡§µ‡§∞‡§£]
2. [‡§ö‡§∞‡§£ 2 ‡§µ‡§ø‡§µ‡§∞‡§£]
3. [‡§ö‡§∞‡§£ 3 ‡§µ‡§ø‡§µ‡§∞‡§£]
4. [‡§ö‡§∞‡§£ 4 ‡§µ‡§ø‡§µ‡§∞‡§£]

‡§∞‡§Ç‡§ó:
#[‡§∞‡§Ç‡§ó1 ‡§π‡•á‡§ï‡•ç‡§∏ ‡§ï‡•ã‡§°] - [‡§∞‡§Ç‡§ó ‡§®‡§æ‡§Æ ‡§î‡§∞ ‡§Æ‡§π‡§§‡•ç‡§µ]
#[‡§∞‡§Ç‡§ó2 ‡§π‡•á‡§ï‡•ç‡§∏ ‡§ï‡•ã‡§°] - [‡§∞‡§Ç‡§ó ‡§®‡§æ‡§Æ ‡§î‡§∞ ‡§Æ‡§π‡§§‡•ç‡§µ]
#[‡§∞‡§Ç‡§ó3 ‡§π‡•á‡§ï‡•ç‡§∏ ‡§ï‡•ã‡§°] - [‡§∞‡§Ç‡§ó ‡§®‡§æ‡§Æ ‡§î‡§∞ ‡§Æ‡§π‡§§‡•ç‡§µ]
#[‡§∞‡§Ç‡§ó4 ‡§π‡•á‡§ï‡•ç‡§∏ ‡§ï‡•ã‡§°] - [‡§∞‡§Ç‡§ó ‡§®‡§æ‡§Æ ‡§î‡§∞ ‡§Æ‡§π‡§§‡•ç‡§µ]`
        }
      };

      const { context, instructions } = contextMap[selectedLanguage];

      const fullPrompt = `${context} ${prompt}

${instructions}

‡§ß‡•ç‡§Ø‡§æ‡§® ‡§¶‡•á‡§Ç: ‡§∏‡•Å‡§ù‡§æ‡§µ ‡§≠‡§æ‡§∞‡§§‡•Ä‡§Ø ‡§∂‡§ø‡§≤‡•ç‡§™ ‡§™‡§∞‡§Ç‡§™‡§∞‡§æ‡§ì‡§Ç ‡§ï‡•á ‡§™‡•ç‡§∞‡§§‡§ø ‡§∏‡§ü‡•Ä‡§ï ‡§î‡§∞ ‡§Æ‡•å‡§≤‡§ø‡§ï ‡§π‡•ã‡§®‡•á ‡§ö‡§æ‡§π‡§ø‡§è‡•§`;

      const response = await axios.post(
        `${API_URL}?key=${API_KEY}`,
        {
          contents: [{
            parts: [{
              text: fullPrompt
            }]
          }]
        }
      );

      const result = response.data.candidates[0].content.parts[0].text;

      const parseResult = (text) => {
        const steps = [];
        const colors = [];

        const stepMatches = text.match(/\d\.\s*([^\n]+)/g) || [];
        stepMatches.forEach(match => {
          const step = match.replace(/^\d\.\s*/, '').trim();
          if (step && !step.toLowerCase().includes('color') && !step.toLowerCase().includes('‡§∞‡§Ç‡§ó')) {
            steps.push(step);
          }
        });

        const colorMatches = text.match(/#[0-9A-Fa-f]{6}\s*-\s*[^\n]+/g) || [];
        colorMatches.forEach(match => {
          const [hex, significance] = match.split('-').map(s => s.trim());
          if (hex && significance) {
            colors.push({
              hex: hex.trim(),
              significance: significance.trim()
            });
          }
        });

        return { 
          steps: steps.slice(0, 4), 
          colors: colors.slice(0, 4) 
        };
      };

      const { steps, colors } = parseResult(result);

      if (steps.length === 0 || colors.length === 0) {
        throw new Error('Unable to parse design details');
      }

      setDesignSteps(steps);
      setSuggestedPalette(colors);
    } catch (error) {
      console.error("Error generating design:", error);
      Alert.alert(
        selectedLanguage === 'en' ? 'Error' : '‡§§‡•ç‡§∞‡•Å‡§ü‡§ø',
        selectedLanguage === 'en' 
          ? 'Failed to generate design. Please try again.' 
          : '‡§°‡§ø‡§ú‡§º‡§æ‡§á‡§® ‡§¨‡§®‡§æ‡§®‡•á ‡§Æ‡•á‡§Ç ‡§µ‡§ø‡§´‡§≤‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§™‡•Å‡§®‡§É ‡§™‡•ç‡§∞‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç‡•§',
        [{ text: 'OK' }]
      );
    } finally {
      setIsLoading(false);
    }
  };

  const renderLanguageModal = () => (
    <Modal
      visible={isLanguageModalVisible}
      transparent={true}
      animationType="slide"
    >
      <View style={styles.languageModalContainer}>
        <View style={styles.languageModalContent}>
          <Text style={styles.languageModalTitle}>
            {selectedLanguage === 'en' ? 'Select Language' : '‡§≠‡§æ‡§∑‡§æ ‡§ö‡•Å‡§®‡•á‡§Ç'}
          </Text>
          {LANGUAGE_OPTIONS.map((lang) => (
            <TouchableOpacity
              key={lang.code}
              style={styles.languageOption}
              onPress={() => {
                setSelectedLanguage(lang.code);
                setIsLanguageModalVisible(false);
              }}
            >
              <Text style={styles.languageIcon}>{lang.icon}</Text>
              <Text style={styles.languageText}>{lang.name}</Text>
            </TouchableOpacity>
          ))}
        </View>
      </View>
    </Modal>
  );

  return (
    <SafeAreaView style={styles.container}>
      {renderLanguageModal()}
      <ScrollView>
        <TouchableOpacity 
          style={styles.languageButton}
          onPress={() => setIsLanguageModalVisible(true)}
        >
          <Text style={styles.languageButtonText}>
            {LANGUAGE_OPTIONS.find(l => l.code === selectedLanguage).icon} 
            {' '}
            {LANGUAGE_OPTIONS.find(l => l.code === selectedLanguage).name}
          </Text>
        </TouchableOpacity>

        <LinearGradient colors={['#8C5E58', '#D4AA7D']} style={styles.header}>
          <Text style={styles.headerTitle}>
            {selectedLanguage === 'en' 
              ? 'Traditional Design Guide' 
              : '‡§™‡§æ‡§∞‡§Ç‡§™‡§∞‡§ø‡§ï ‡§°‡§ø‡§ú‡§º‡§æ‡§á‡§® ‡§Æ‡§æ‡§∞‡•ç‡§ó‡§¶‡§∞‡•ç‡§∂‡§ï'}
          </Text>
          <Text style={styles.headerSubtitle}>
            {selectedLanguage === 'en' 
              ? 'Get inspired by Indian crafts heritage' 
              : '‡§≠‡§æ‡§∞‡§§‡•Ä‡§Ø ‡§∂‡§ø‡§≤‡•ç‡§™ ‡§µ‡§ø‡§∞‡§æ‡§∏‡§§ ‡§∏‡•á ‡§™‡•ç‡§∞‡•á‡§∞‡§£‡§æ ‡§≤‡•á‡§Ç'}
          </Text>
        </LinearGradient>

        <View style={styles.section}>
          <Text style={styles.sectionTitle}>
            {selectedLanguage === 'en' 
              ? 'Select Craft Category' 
              : '‡§∂‡§ø‡§≤‡•ç‡§™ ‡§∂‡•ç‡§∞‡•á‡§£‡•Ä ‡§ö‡•Å‡§®‡•á‡§Ç'}
          </Text>
          <ScrollView 
            horizontal 
            showsHorizontalScrollIndicator={false}
            style={styles.categoriesContainer}
          >
            {CRAFT_CATEGORIES[selectedLanguage].map((category, index) => (
              <TouchableOpacity
                key={index}
                style={[
                  styles.categoryChip,
                  selectedCategory === category && styles.selectedCategoryChip
                ]}
                onPress={() => setSelectedCategory(category)}
              >
                <Text style={[
                  styles.categoryText,
                  selectedCategory === category && styles.selectedCategoryText
                ]}>
                  {category}
                </Text>
              </TouchableOpacity>
            ))}
          </ScrollView>
        </View>

        <View style={styles.section}>
          <Text style={styles.sectionTitle}>
            {selectedLanguage === 'en' 
              ? 'Describe Your Design Idea' 
              : '‡§Ö‡§™‡§®‡§æ ‡§°‡§ø‡§ú‡§º‡§æ‡§á‡§® ‡§µ‡§ø‡§ö‡§æ‡§∞ ‡§¨‡§§‡§æ‡§è‡§Ç'}
          </Text>
          <TextInput
            style={styles.input}
            placeholder={
              selectedLanguage === 'en' 
                ? "E.g., 'Modern Bidriware vase with peacock motifs' or 'Traditional textile pattern with contemporary colors'" 
                : "‡§ú‡•à‡§∏‡•á, '‡§Æ‡•ã‡§∞ ‡§ï‡•á ‡§°‡§ø‡§ú‡§æ‡§á‡§® ‡§µ‡§æ‡§≤‡§æ ‡§Ü‡§ß‡•Å‡§®‡§ø‡§ï ‡§¨‡§ø‡§¶‡§∞‡•Ä ‡§ï‡§æ ‡§´‡•Ç‡§≤‡§¶‡§æ‡§®' ‡§Ø‡§æ '‡§∏‡§Æ‡§ï‡§æ‡§≤‡•Ä‡§® ‡§∞‡§Ç‡§ó‡•ã‡§Ç ‡§ï‡•á ‡§∏‡§æ‡§• ‡§™‡§æ‡§∞‡§Ç‡§™‡§∞‡§ø‡§ï ‡§µ‡§∏‡•ç‡§§‡•ç‡§∞ ‡§™‡•à‡§ü‡§∞‡•ç‡§®'"
            }
            value={prompt}
            onChangeText={setPrompt}
            multiline
            numberOfLines={3}
          />
          <TouchableOpacity 
            style={[styles.generateButton, isLoading && styles.generateButtonDisabled]}
            onPress={handleGenerateDesign}
            disabled={isLoading}
          >
            <Icon name={isLoading ? "hourglass-empty" : "auto-awesome"} size={24} color="#FFF" />
            <Text style={styles.generateText}>
              {isLoading 
                ? (selectedLanguage === 'en' ? 'Generating Design...' : '‡§°‡§ø‡§ú‡§º‡§æ‡§á‡§® ‡§§‡•à‡§Ø‡§æ‡§∞ ‡§π‡•ã ‡§∞‡§π‡§æ ‡§π‡•à...')
                : (selectedLanguage === 'en' ? 'Generate Design Guide' : '‡§°‡§ø‡§ú‡§º‡§æ‡§á‡§® ‡§Æ‡§æ‡§∞‡•ç‡§ó‡§¶‡§∞‡•ç‡§∂‡§ï ‡§¨‡§®‡§æ‡§è‡§Ç')}
            </Text>
          </TouchableOpacity>
        </View>

        {isLoading && (
          <View style={styles.loadingContainer}>
            <ActivityIndicator size="large" color="#8C5E58" />
            <Text style={styles.loadingText}>
              {selectedLanguage === 'en' 
                ? 'Creating your design guide...' 
                : '‡§Ü‡§™‡§ï‡§æ ‡§°‡§ø‡§ú‡§º‡§æ‡§á‡§® ‡§Æ‡§æ‡§∞‡•ç‡§ó‡§¶‡§∞‡•ç‡§∂‡§ï ‡§§‡•à‡§Ø‡§æ‡§∞ ‡§π‡•ã ‡§∞‡§π‡§æ ‡§π‡•à...'}
            </Text>
          </View>
        )}

        {designSteps.length > 0 && (
          <View style={styles.section}>
            <Text style={styles.sectionTitle}>
              {selectedLanguage === 'en' 
                ? 'Traditional Technique Steps' 
                : '‡§™‡§æ‡§∞‡§Ç‡§™‡§∞‡§ø‡§ï ‡§§‡§ï‡§®‡•Ä‡§ï ‡§ï‡•á ‡§ö‡§∞‡§£'}
            </Text>
            {designSteps.map((step, index) => (
              <View key={index} style={styles.stepContainer}>
                <Text style={styles.stepNumber}>{index + 1}</Text>
                <Text style={styles.stepText}>{step}</Text>
              </View>
            ))}
          </View>
        )}

        {suggestedPalette.length > 0 && (
          <View style={styles.section}>
            <Text style={styles.sectionTitle}>
              {selectedLanguage === 'en' 
                ? 'Traditional Color Palette' 
                : '‡§™‡§æ‡§∞‡§Ç‡§™‡§∞‡§ø‡§ï ‡§∞‡§Ç‡§ó ‡§™‡•à‡§≤‡•á‡§ü'}
            </Text>
            <View style={styles.paletteContainer}>
              {suggestedPalette.map((color, index) => (
                <View key={index} style={styles.colorItemContainer}>
                  <View style={[styles.colorBox, { backgroundColor: color.hex }]} />
                  <Text style={styles.colorSignificance}>{color.significance}</Text>
                </View>
              ))}
            </View>
          </View>
        )}
      </ScrollView>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#F5F2ED',
  },
  header: {
    padding: 20,
    paddingTop: 60,
    borderBottomLeftRadius: 20,
    borderBottomRightRadius: 20,
  },
  headerTitle: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#FFF',
  },
  headerSubtitle: {
    fontSize: 14,
    color: '#FFF',
    opacity: 0.8,
    marginTop: 4,
  },
  section: {
    padding: 16,
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#2A2922',
    marginBottom: 16,
  },
  categoriesContainer: {
    flexDirection: 'row',
    paddingBottom: 12,
  },
  categoryChip: {
    backgroundColor: '#FFF',
    paddingHorizontal: 16,
    paddingVertical: 8,
    borderRadius: 20,
    marginRight: 8,
    borderWidth: 1,
    borderColor: '#8C5E58',
  },
  selectedCategoryChip: {
    backgroundColor: '#8C5E58',
  },
  categoryText: {
    color: '#8C5E58',
    fontSize: 14,
  },
  selectedCategoryText: {
    color: '#FFF',
  },
  input: {
    backgroundColor: '#FFF',
    padding: 16,
    borderRadius: 12,
    fontSize: 16,
    borderWidth: 1,
    borderColor: '#DDD',
    marginBottom: 16,
    minHeight: 100,
    textAlignVertical: 'top',
  },
  generateButton: {
    flexDirection: 'row',
    backgroundColor: '#8C5E58',
    padding: 16,
    borderRadius: 12,
    justifyContent: 'center',
    alignItems: 'center',
    elevation: 2,
  },
  generateButtonDisabled: {
    opacity: 0.7,
  },
  generateText: {
    marginLeft: 8,
    color: '#FFF',
    fontSize: 16,
    fontWeight: 'bold',
  },
  loadingContainer: {
    padding: 20,
    alignItems: 'center',
  },
  loadingText: {
    marginTop: 8,
    color: '#8C5E58',
    fontSize: 14,
  },
  stepContainer: {
    flexDirection: 'row',
    backgroundColor: '#FFF',
    padding: 16,
    borderRadius: 12,
    marginBottom: 12,
    elevation: 1,
  },
  stepNumber: {
    backgroundColor: '#8C5E58',
    color: '#FFF',
    width: 24,
    height: 24,
    borderRadius: 12,
    textAlign: 'center',
    lineHeight: 24,
    marginRight: 12,
    fontSize: 14,
    fontWeight: 'bold',
  },
  stepText: {
    flex: 1,
    fontSize: 16,
    color: '#2A2922',
    lineHeight: 24,
  },
  paletteContainer: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    gap: 16,
    padding: 8,
  },
  colorItemContainer: {
    alignItems: 'center',
    width: '45%',
    marginBottom: 16,
  },
  colorBox: {
    width: 60,
    height: 60,
    borderRadius: 12,
    marginBottom: 8,
    elevation: 2,
    borderWidth: 1,
    borderColor: '#DDD',
  },
  colorSignificance: {
    fontSize: 14,
    color: '#2A2922',
    textAlign: 'center',
    paddingHorizontal: 8,
  },
  // Language Selection Styles
  languageButton: {
    position: 'absolute', 
    top: 50, 
    right: 16, 
    zIndex: 10,
    backgroundColor: '#FFF',
    padding: 8,
    borderRadius: 20,
    flexDirection: 'row',
    alignItems: 'center',
    elevation: 2,
  },
  languageButtonText: {
    marginLeft: 8,
    fontWeight: 'bold',
  },
  languageModalContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: 'rgba(0,0,0,0.5)',
  },
  languageModalContent: {
    backgroundColor: '#FFF',
    borderRadius: 20,
    padding: 20,
    width: '80%',
    alignItems: 'center',
  },
  languageModalTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    marginBottom: 20,
    color: '#2A2922',
  },
  languageOption: {
    flexDirection: 'row',
    alignItems: 'center',
    padding: 12,
    width: '100%',
    borderBottomWidth: 1,
    borderBottomColor: '#DDD',
  },
  languageIcon: {
    fontSize: 24,
    marginRight: 12,
  },
  languageText: {
    fontSize: 16,
    color: '#2A2922',
  }
});

export default DesignIdea;